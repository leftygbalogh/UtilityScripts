#!/bin/sh

#watch the files in the list and log events into logfile
inotifywait --monitor --quiet --format "%w%f %f %w %e" --outfile /home/ebalgza/inotify.log --fromfile /home/ebalgza/inotifyfile.list &

#stip out modified files from git status
git status | grep "modified: " | cut -d':' -f2 | xargs | tr ' ' '\n'
#space separated
git status | grep "modified: " | cut -d':' -f2 | xargs

#get the session number
export sessionID=$(who am i | cut -d'/' -f2 | cut -d' ' -f1)

#create filename based on session ID
nameFile="/var/lib/git-committer/nameSignumFile$sessionID"

#list all currently active ssh sessions
 date; last | grep "still"

#Create a directory for session specific data
mkdir /var/lib/git-committer

#Create a directory for app logs
mkdir /var/log/git-committer

#Initialise log file
touch "/var/log/git-committer/file-change-events-$(date +%Y%m%d).log"

#Enable recursive calls on startup script
chmod +x /etc/profile.d/credentials.sh

#create a folder if it does not exist
mkdir -p "/var/lib/git-committer/"

#Create file if it does not exist
[ -e "$nameFile" ] || touch "$nameFile"

#auto install dialog utility
yes | yum install dialog

#remove app without removing dependencies
rpm -e --nodeps "git"

#find two processes and exclude the grep process
ps -aux | grep [^]]watcher.sh || ps -aux | grep [^]]inotify

#send the output of multiple commands into a logfile
{
    echo "Current list of watched files is in: $filelist"
    cat $filelist
    last | grep "still" | sort
} >> $logfile

#kill maiadduser foo; spawn passwd foo; expect "password:"; send "abc123"; expect "Retype new password:"; send "abc123"; interact; usermod -aG wheel foo;n process and subprocess running in the background
killall inotifywait || killall watcher.sh

#Check multiple joint conditions A AND B
if [ $opened == "TRUE" ] &&  [ $modified == "TRUE" ] && [ $closed == "TRUE"  ]; then
        echo "$filename has been changed."
        echo "Time to call the ghost busters"
    fi

#echo in bold ad then set font back to regular
echo -e "\033[1mNAME\033[0m"

#send email from commandline
cat /tmp/contentsfile | mail -s "Test message subject" -c CCaddress@ericsson.com -r sender@vmx-eea375 -a /tmp/attachment.txt TOaddress@ericsson.com

#show attached device details such as drives and mounted devices
blkid -o list

#list processes with: groupID ID TTY_number
ps -g -o  "%r %p %y %x %c"

#get the process ID of a background process
ps -g -o  "%p %r %y %x %c" | grep "inotifywait" | cut -d ' ' -f1

#kill a process by ID based on its name
kill $( ps -g -o  "%p %r %y %x %c" | grep "inotifywait" | cut -d ' ' -f1 )

#Follow logs and highlight in green and red based on line contents
tail -f /opt/ericsson/eea/log/corr_0.log | awk '/blocking:false/ {print "\033[32m" $0 "\033[39m"}  /blocking:true/ {print "\033[31m" $0 "\033[39m"}'

#colorize log based on conditions
less /opt/ericsson/eea/log/corr_0.log | awk '  /blocking:false/ {print "\033[32m" $0 "\033[39m"}  /blocking:true/ {print "\033[31m" $0 "\033[39m"} /Report eventNum/ {print "\033[36m" $0 "\033[39m"} /Receive summary:/ {print "\033[37m" $0 "\033[39m"} /Memory/ {print "\033[38m" $0 "\033[39m"}'

#Log into each server and do something
for server in seliics01219 seliics01220 seliics01221; do echo $server; redis-cli -h $server -p 3000 keys '*'; done



#Set up sudo user with one line
U=youzerneim; P="pswrd"; adduser $U; echo $P | passwd $U --stdin; usermod -aG wheel $U; su - $U

#Look up IPs - various flavours
# Look up your own external IP
hostname -i
ifconfig | grep -v 127. | grep -v inet6 | grep inet

#look up incoming IP of your current SSH connection
echo $SSH_CONNECTION

#List all incoming connection IPs
netstat -taepn

#List all network connections with IPs ad ports
ss -lutan

#Look up IP of remote server by name
nslookup google.com
traceroute -I google.com

#check in file if user is authorized, does not allow partial match
username="ebalgza"; if [[ $(cat /tmp/authorized-users | grep -w $username | cut -d':' -f2) = "authorized" ]]; then echo "yes"; else echo "no"; fi

#Look up IP of a list of servers
 sed -i '/^$/d' /tmp/serverlistbyname;{ for server in $(cat /tmp/serverlistbyname); do nslookup $server | grep -v "#" | grep "Address:" |  cut -d' ' -f2 | tr -d '\n'; echo ":internal"; done; } > /tmp/network-IPs;  cat /tmp/network-IPs

#Remove lines from file that match a case-insensitive string
sed -i '/HIST*/ Id' /root/.bashrc;

#Change settings in the users .bashrc file
me=$(who am i | cut -d' ' -f1); sed -i '/HIST*/ Id' /$me/.bashrc; echo "HISTSIZE=5100" >> /$me/.bashrc; echo "HISTFILESIZE=312345" >> /$me/.bashrc; echo "HISTFILE=/var/log/somehistory" >> /$me/.bashrc;

#Set line start in bashrc
#http://bashrcgenerator.com/
export PS1="[\u@\h \w]\$ \[$(tput sgr0)\]"
